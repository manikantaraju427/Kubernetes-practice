# Container:

A container is a lightweight, standalone executable package that includes everything needed to run a piece of software, including code, runtime, libraries, and system tools.
Containers provide process isolation, ensuring that applications run consistently across different environments.
Containers are the smallest deployable units in Kubernetes, encapsulating an application and its dependencies.
Containers can run directly on a host OS or within a virtual machine.
  
  
# Pod:

A pod is the smallest deployable unit in Kubernetes and represents a single instance of a running process in a cluster.
Pods are used to host containers, but they can also host multiple containers that share the same network namespace and storage volumes.
Containers within a pod share the same IP address and port space, allowing them to communicate with each other using localhost.
Pods are designed to be ephemeral, and their lifespan is tied to the application or process they host. If a pod fails or is terminated, it is not rescheduled automatically.

  
 # Deployment:

A Deployment is a higher-level Kubernetes resource that provides declarative updates to applications.
Deployments are used to ensure that a specified number of pod replicas are running at all times. They help with maintaining application availability and scaling.
Deployments allow you to define the desired state of your application, including the number of replicas, the container image, and update strategies.
When you update a Deployment with a new version of your application or configuration, it orchestrates rolling updates, ensuring zero-downtime deployments by gradually replacing old pods with new ones.
